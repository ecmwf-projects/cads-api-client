cads_api_client
===============

.. py:module:: cads_api_client

.. autoapi-nested-parse::

   CADS API Python client.



Classes
-------

.. autoapisummary::

   cads_api_client.ApiClient


Package Contents
----------------

.. py:class:: ApiClient

   A client to interact with the CADS API.

   :param url: API URL. If None, infer from CADS_API_URL or CADS_API_RC.
   :type url: :class:`str` or :obj:`None`
   :param key: API Key. If None, infer from CADS_API_KEY or CADS_API_RC.
   :type key: :class:`str` or :obj:`None`
   :param verify: Whether to verify the TLS certificate at the remote end.
                  If None, infer from CADS_API_VERIFY or CADS_API_RC.
   :type verify: :class:`bool` or :obj:`None`
   :param timeout: How many seconds to wait for the server to send data, as a float, or a (connect, read) tuple.
   :type timeout: :class:`float` or :class:`tuple`
   :param progress: Whether to display the progress bar during download.
   :type progress: :class:`bool`
   :param cleanup: Whether to delete requests after completion.
   :type cleanup: :class:`bool`
   :param sleep_max: Maximum time to wait (in seconds) while checking for a status change.
   :type sleep_max: :class:`float`
   :param retry_after: Time to wait (in seconds) between retries.
   :type retry_after: :class:`float`
   :param maximum_tries: Maximum number of retries.
   :type maximum_tries: :class:`int`
   :param session: Requests session.
   :type session: :class:`requests.Session`


   .. py:method:: accept_licence(licence_id, revision)

      Accept a licence.

      :param licence_id: Licence ID.
      :type licence_id: :class:`str`
      :param revision: Licence revision number.
      :type revision: :class:`int`

      :returns: Content of the response.
      :rtype: :class:`dict[str`, :class:`Any]`



   .. py:method:: apply_constraints(collection_id, **request)

      Apply constraints to a request.

      :param collection_id: Collection ID (e.g., ``"reanalysis-era5-pressure-levels"``).
      :type collection_id: :class:`str`
      :param \*\*request: Request parameters.
      :type \*\*request: :class:`Any`

      :returns: Dictionary of valid values.
      :rtype: :class:`dict[str`, :class:`Any]`



   .. py:method:: check_authentication()

      Verify authentication.

      :returns: Content of the response.
      :rtype: :class:`dict[str`, :class:`Any]`

      :raises requests.HTTPError: If the authentication fails.



   .. py:method:: download_results(request_uid, target = None)

      Download the results of a job.

      :param request_uid: Request UID
      :type request_uid: :class:`str`
      :param target: Target path. If None, download to the working directory.
      :type target: :class:`str | None`

      :returns: Path to the retrieved file.
      :rtype: :class:`str`



   .. py:method:: estimate_costs(collection_id, **request)

      Estimate costs of a request.

      :param collection_id: Collection ID (e.g., ``"reanalysis-era5-pressure-levels"``).
      :type collection_id: :class:`str`
      :param \*\*request: Request parameters.
      :type \*\*request: :class:`Any`

      :returns: Dictionary of estimated costs.
      :rtype: :class:`dict[str`, :class:`Any]`



   .. py:method:: get_collection(collection_id)

      Retrieve a catalogue collection.

      :param collection_id: Collection ID (e.g., ``"reanalysis-era5-pressure-levels"``).
      :type collection_id: :class:`str`

      :rtype: :class:`catalogue.Collection`



   .. py:method:: get_job(request_uid)

      Retrieve a submitted job.

      :param request_uid: Request UID
      :type request_uid: :class:`str`

      :rtype: :class:`processing.StatusInfo`



   .. py:method:: get_process(collection_id)

      Retrieve a process.

      :param collection_id: Collection ID (e.g., ``"reanalysis-era5-pressure-levels"``).
      :type collection_id: :class:`str`

      :rtype: :class:`processing.Process`



   .. py:method:: get_remote(request_uid)

      Retrieve the remote object of a submitted job.

      :param request_uid: Request UID
      :type request_uid: :class:`str`

      :rtype: :class:`processing.Remote`



   .. py:method:: retrieve(collection_id, target = None, **request)

      Submit a job and retrieve the results.

      :param collection_id: Collection ID (e.g., ``"reanalysis-era5-pressure-levels"``).
      :type collection_id: :class:`str`
      :param target: Target path. If None, download to the working directory.
      :type target: :class:`str | None`
      :param \*\*request: Request parameters.
      :type \*\*request: :class:`Any`

      :returns: Path to the retrieved file.
      :rtype: :class:`str`



   .. py:method:: submit(collection_id, **request)

      Submit a job.

      :param collection_id: Collection ID (e.g., ``"reanalysis-era5-pressure-levels"``).
      :type collection_id: :class:`str`
      :param \*\*request: Request parameters.
      :type \*\*request: :class:`Any`

      :rtype: :class:`processing.Remote`



   .. py:method:: submit_and_wait_on_results(collection_id, **request)

      Submit a job and wait for the results to be ready.

      :param collection_id: Collection ID (e.g., ``"reanalysis-era5-pressure-levels"``).
      :type collection_id: :class:`str`
      :param \*\*request: Request parameters.
      :type \*\*request: :class:`Any`

      :rtype: :class:`processing.Results`



   .. py:property:: accepted_licences
      :type: list[dict[str, Any]]

      Accepted licences.

      :returns: List of dictionaries with license information.
      :rtype: :class:`list[dict[str`, :class:`Any]]`


   .. py:property:: collections
      :type: cads_api_client.catalogue.Collections

      Catalogue collections.

      :rtype: :class:`catalogue.Collections`


   .. py:property:: jobs
      :type: cads_api_client.processing.JobList

      Submitted jobs.

      :rtype: :class:`processing.JobList`


   .. py:property:: licences
      :type: list[dict[str, Any]]

      Licences.

      :returns: List of dictionaries with license information.
      :rtype: :class:`list[dict[str`, :class:`Any]]`


   .. py:property:: processes
      :type: cads_api_client.processing.ProcessList

      Available processes.

      :rtype: :class:`processing.ProcessList`


